application {
  config {
    baseName covoituragesolidaire
    applicationType monolith
    packageName io.github.covsol.backend
    languages 	[en, fr]
    searchEngine true
    clientPackageManager yarn
    useSass true
  }
  entities *
}

TOKEN_LENGTH = 16

entity Person {
  /** The name */
  name String required,

  /** The creation date */
  createdAt Instant required,
  /** The last update date */
  updatedAt Instant required
}

entity Sponsor {
  /** The name */
  name String required,

  /** The creation date */
  createdAt Instant required,
  /** The last update date */
  updatedAt Instant required
}


entity Driver {
  /** The name */
  name String required,

  /** The driving license */
  drivingLicense ImageBlob required,

  /** The creation date */
  createdAt Instant required,
  /** The last update date */
  updatedAt Instant required
}

entity Car {
  /** The model */
  model String required,
  /** The model */
  brand String required,
  /** The number of seats for passengers */
  numberOfSeatsForPassengers Integer required min(1),
  /** The number of seats for disabled passengers */
  numberOfSeatsForDisabledPassengers Integer required min(0),

  /** The license plate */
  licensePlate String required,

  /** The owner note */
  note TextBlob,

  /** The car document (ie carte grise in France) */
  carDocument ImageBlob required,

  /** The insurance company */
  insuranceCompany String required,
  /** The insurance number (ie num√©ro de police d'assurance) */
  insuranceNumber String required,
  /** The insurance document (ie carte verte in France) */
  insuranceDocument ImageBlob required,
  /** The insurance document deadline */
  insuranceDocumentDate Instant required,

  /** The creation date */
  createdAt Instant required,
  /** The last update date */
  updatedAt Instant required
}

entity Place {
  /** The name */
  name String required,
  /** The address (from Base Adresse Nationale) */
  address String required,
  /** The city */
  city String required,
  /** The postal code  */
  postCode String required,

  /** The latitude of the address */
  latitude Float min(-90) max(90),
  /** The longitude of the address */
  longitude Float min(-180) max(180),
  /** The altitude of the device */
  altitude Integer
}

entity Request {
  /** The deadline date for the travel destination */
  dateTo Instant required,

  /** The creation date */
  createdAt Instant required,
  /** The last update date */
  updatedAt Instant required
}

enum TravelStatus {
  PROPOSED, BOOKED, CANCELED, IN_PROGRESS, COMPLETED
}

entity Travel {
  /** The starting date */
  status TravelStatus required,
  /** The starting date */
  startAt Instant,
  /** The end date */
  endAt Instant,
  /** The distance */
  distance Integer,

  /** The creation date */
  createdAt Instant required,
  /** The last update date */
  updatedAt Instant required
}

entity Travel {
  /** The starting date */
  status TravelStatus required,
  /** The starting date */
  startAt Instant,
  /** The end date */
  endAt Instant,
  /** The distance */
  distance Integer,

  /** The driver rating */
  driverRating Integer min(1) max(5),
  /** The passengers rating (TODO Rating should be a entity) */
  passengersRating Integer min(1) max(5),

  /** The creation date */
  createdAt Instant required,
  /** The last update date */
  updatedAt Instant required
}

entity Rating {
  /** The rating */
  rating Integer required min(1) max(5),

  /** The comment */
  comment TextBlob,

  /** The creation date */
  createdAt Instant required,
  /** The last update date */
  updatedAt Instant required
}


relationship ManyToOne {
    Place{liveAt} to Person,
    Place{liveAt} to Driver,
    Person{attachedTo(login)} to User,
    Driver{attachedTo(login)} to User,
    Sponsor{sponsor} to Person,
    Sponsor{attachedTo(login)} to User,
    Car{drivenBy(login)} to User,
    Car{ownedBy(login)} to User,
    Rating{person} to Person
}

relationship ManyToMany {
  Travel{passengers} to Person
}

relationship OneToOne {
    Request{requestedBy} to Person,
    Request{from} to Place,
    Request{to} to Place,
    Travel{drivenBy} to Driver,
    Travel{drivenWith} to Car,
    Travel{from} to Place,
    Travel{to} to Place,
    Rating{driver} to Driver,
    Travel to Rating
}

paginate Person with pagination
paginate Sponsor with pagination
paginate Driver with pagination
paginate Car with pagination
paginate Request with pagination
paginate Travel with pagination
paginate Rating with infinite-scroll

dto * with mapstruct
service all with serviceImpl
//angularSuffix * with covsol
//microservice * with covsol
search * with elasticsearch
filter *
